/**
 * Treum Platform APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  CreateItemForCollectionBody,
  createItemForCollectionBodySchema,
} from '../models/createItemForCollectionBody';
import {
  CreateProductInput,
  createProductInputSchema,
} from '../models/createProductInput';
import {
  DeprecatedDeployTokenContractBody,
  deprecatedDeployTokenContractBodySchema,
} from '../models/deprecatedDeployTokenContractBody';
import {
  DeprecatedLinkExternalContractBody,
  deprecatedLinkExternalContractBodySchema,
} from '../models/deprecatedLinkExternalContractBody';
import {
  GenerateApiKeyOutput,
  generateApiKeyOutputSchema,
} from '../models/generateApiKeyOutput';
import { Item, itemSchema } from '../models/item';
import {
  PaymentsCheckoutInput,
  paymentsCheckoutInputSchema,
} from '../models/paymentsCheckoutInput';
import {
  PaymentsCheckoutOutput,
  paymentsCheckoutOutputSchema,
} from '../models/paymentsCheckoutOutput';
import {
  ProductResponse,
  productResponseSchema,
} from '../models/productResponse';
import { PublicItem, publicItemSchema } from '../models/publicItem';
import { array, number, optional, string } from '../schema';
import { BaseController } from './baseController';

export class DeprecatedController extends BaseController {
  /**
   * Revoke user API key
   *
   * @return Response from the API call
   */
  async revokeUserAPIKey(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE', '/api/v2/api-key');
    req.header('Content-Type', 'application/json');
    return req.call(requestOptions);
  }

  /**
   * Generate user API key
   *
   * @return Response from the API call
   */
  async generateUserAPIKey(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<GenerateApiKeyOutput>> {
    const req = this.createRequest('POST', '/api/v2/api-key');
    req.header('Content-Type', 'application/json');
    return req.callAsJson(generateApiKeyOutputSchema, requestOptions);
  }

  /**
   * Deprecated, use provision endpoint.
   *
   * @param itemId
   * @return Response from the API call
   */
  async mintAnItem(
    itemId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Item>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({ itemId: [itemId, string()] });
    req.header('Content-Type', 'application/json');
    req.appendTemplatePath`/api/v2/items/${mapped.itemId}/mint`;
    return req.callAsJson(itemSchema, requestOptions);
  }

  /**
   * Get all products
   *
   * @return Response from the API call
   */
  async getAllProducts(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ProductResponse[]>> {
    const req = this.createRequest('GET', '/api/v2/products');
    req.header('Content-Type', 'application/json');
    return req.callAsJson(array(productResponseSchema), requestOptions);
  }

  /**
   * Create a new product
   *
   * @param body
   * @return Response from the API call
   */
  async createANewProduct(
    body?: CreateProductInput,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ProductResponse>> {
    const req = this.createRequest('POST', '/api/v2/products');
    const mapped = req.prepareArgs({
      body: [body, optional(createProductInputSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    return req.callAsJson(productResponseSchema, requestOptions);
  }

  /**
   * Delete a product
   *
   * @param productId
   * @return Response from the API call
   */
  async deleteAProduct(
    productId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({ productId: [productId, string()] });
    req.header('Content-Type', 'application/json');
    req.appendTemplatePath`/api/v2/products/${mapped.productId}`;
    return req.call(requestOptions);
  }

  /**
   * Get a product by id
   *
   * @param productId
   * @return Response from the API call
   */
  async getAProductById(
    productId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ProductResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ productId: [productId, string()] });
    req.header('Content-Type', 'application/json');
    req.appendTemplatePath`/api/v2/products/${mapped.productId}`;
    return req.callAsJson(productResponseSchema, requestOptions);
  }

  /**
   * This is a partial update, only attributes present will be updated.
   *
   * @param productId
   * @param body
   * @return Response from the API call
   */
  async editAProduct(
    productId: string,
    body?: CreateProductInput,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ProductResponse>> {
    const req = this.createRequest('PATCH');
    const mapped = req.prepareArgs({
      productId: [productId, string()],
      body: [body, optional(createProductInputSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/api/v2/products/${mapped.productId}`;
    return req.callAsJson(productResponseSchema, requestOptions);
  }

  /**
   * Deploy the token contract for the product
   *
   * @param productId
   * @param body
   * @return Response from the API call
   */
  async deployTheTokenContractForTheProduct(
    productId: string,
    body?: DeprecatedDeployTokenContractBody,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ProductResponse>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      productId: [productId, string()],
      body: [body, optional(deprecatedDeployTokenContractBodySchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/api/v2/products/${mapped.productId}/deploy`;
    return req.callAsJson(productResponseSchema, requestOptions);
  }

  /**
   * Get all items associated with this product
   *
   * @param productId
   * @return Response from the API call
   */
  async getAllItemsAssociatedWithThisProduct(
    productId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Item[]>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ productId: [productId, string()] });
    req.header('Content-Type', 'application/json');
    req.appendTemplatePath`/api/v2/products/${mapped.productId}/items`;
    return req.callAsJson(array(itemSchema), requestOptions);
  }

  /**
   * Create a new item associated with the given collection
   *
   * @param productId
   * @param body
   * @return Response from the API call
   */
  async createANewItemAssociatedWithTheGivenCollection(
    productId: string,
    body?: CreateItemForCollectionBody,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Item>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      productId: [productId, string()],
      body: [body, optional(createItemForCollectionBodySchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/api/v2/products/${mapped.productId}/items`;
    return req.callAsJson(itemSchema, requestOptions);
  }

  /**
   * Link; external contract to the product
   *
   * @param productId
   * @param body
   * @return Response from the API call
   */
  async linkExternalContractToTheProduct(
    productId: string,
    body?: DeprecatedLinkExternalContractBody,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ProductResponse>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      productId: [productId, string()],
      body: [body, optional(deprecatedLinkExternalContractBodySchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/api/v2/products/${mapped.productId}/link-external-contract`;
    return req.callAsJson(productResponseSchema, requestOptions);
  }

  /**
   * This makes no guarantees on if/when the request will be made. This is only applicable to items
   * linked to external contracts.
   *
   * @param productId
   * @return Response from the API call
   */
  async requestAMetadataRefreshForTheGivenProduct(
    productId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({ productId: [productId, string()] });
    req.header('Content-Type', 'application/json');
    req.appendTemplatePath`/api/v2/products/${mapped.productId}/refresh-metadata`;
    return req.call(requestOptions);
  }

  /**
   * Deprecated as this endpoint may return incorrect results, contact administrators if you require a
   * public item lookup by contract address & token_id
   *
   * @param contractAddress
   * @param tokenId
   * @return Response from the API call
   */
  async getAPublicItemByTokenContractAndTokenId(
    contractAddress: string,
    tokenId: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PublicItem>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      contractAddress: [contractAddress, string()],
      tokenId: [tokenId, number()],
    });
    req.header('Content-Type', 'application/json');
    req.appendTemplatePath`/api/v2/public/items/${mapped.contractAddress}/${mapped.tokenId}`;
    return req.callAsJson(publicItemSchema, requestOptions);
  }

  /**
   * Initiate Stripe payment session
   *
   * @param body
   * @return Response from the API call
   */
  async initiateStripePaymentSession(
    body?: PaymentsCheckoutInput,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PaymentsCheckoutOutput>> {
    const req = this.createRequest(
      'POST',
      '/api/v2/public/payment-integrations/create-stripe-session'
    );
    const mapped = req.prepareArgs({
      body: [body, optional(paymentsCheckoutInputSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    return req.callAsJson(paymentsCheckoutOutputSchema, requestOptions);
  }
}
