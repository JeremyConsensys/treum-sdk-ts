/**
 * Treum Platform APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  AddPaymentTokenBody,
  addPaymentTokenBodySchema,
} from '../models/addPaymentTokenBody';
import {
  NetworkPaymentToken,
  networkPaymentTokenSchema,
} from '../models/networkPaymentToken';
import { array, number, optional, string } from '../schema';
import { BaseController } from './baseController';

export class PaymentTokensController extends BaseController {
  /**
   * Adds a new payment token
   *
   * @param body
   * @return Response from the API call
   */
  async addsANewPaymentToken(
    body?: AddPaymentTokenBody,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<NetworkPaymentToken>> {
    const req = this.createRequest('POST', '/api/v2/payment-tokens');
    const mapped = req.prepareArgs({
      body: [body, optional(addPaymentTokenBodySchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    return req.callAsJson(networkPaymentTokenSchema, requestOptions);
  }

  /**
   * Delete a payment token
   *
   * @param networkId
   * @param address
   * @return Response from the API call
   */
  async deleteAPaymentToken(
    networkId: number,
    address: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      networkId: [networkId, number()],
      address: [address, string()],
    });
    req.header('Content-Type', 'application/json');
    req.appendTemplatePath`/api/v2/payment-tokens/${mapped.networkId}/${mapped.address}`;
    return req.call(requestOptions);
  }

  /**
   * Get payment tokens available for the given networks
   *
   * @param networkId
   * @return Response from the API call
   */
  async getPaymentTokensAvailableForTheGivenNetworks(
    networkId: number[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<NetworkPaymentToken[]>> {
    const req = this.createRequest(
      'GET',
      '/api/v2/public/tokens/payment-tokens'
    );
    const mapped = req.prepareArgs({ networkId: [networkId, array(number())] });
    req.header('Content-Type', 'application/json');
    req.query('network_id', mapped.networkId);
    return req.callAsJson(array(networkPaymentTokenSchema), requestOptions);
  }
}
