/**
 * Treum Platform APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  TestWebhookInput,
  testWebhookInputSchema,
} from '../models/testWebhookInput';
import {
  TestWebhookOutput,
  testWebhookOutputSchema,
} from '../models/testWebhookOutput';
import { Webhook, webhookSchema } from '../models/webhook';
import { WebhookInput, webhookInputSchema } from '../models/webhookInput';
import { array, optional, string } from '../schema';
import { BaseController } from './baseController';

export class WebhooksController extends BaseController {
  /**
   * Send a sample webhook to the given url
   *
   * @param body
   * @return Response from the API call
   */
  async sendASampleWebhookToTheGivenUrl(
    body?: TestWebhookInput,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<TestWebhookOutput>> {
    const req = this.createRequest('POST', '/api/v2/test-webhook');
    const mapped = req.prepareArgs({
      body: [body, optional(testWebhookInputSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    return req.callAsJson(testWebhookOutputSchema, requestOptions);
  }

  /**
   * Get all webhooks for the current organization
   *
   * @return Response from the API call
   */
  async getAllWebhooksForTheCurrentOrganization(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Webhook[]>> {
    const req = this.createRequest('GET', '/api/v2/webhooks');
    req.header('Content-Type', 'application/json');
    return req.callAsJson(array(webhookSchema), requestOptions);
  }

  /**
   * Create a new webhook
   *
   * @param body
   * @return Response from the API call
   */
  async createANewWebhook(
    body?: WebhookInput,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Webhook>> {
    const req = this.createRequest('POST', '/api/v2/webhooks');
    const mapped = req.prepareArgs({
      body: [body, optional(webhookInputSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    return req.callAsJson(webhookSchema, requestOptions);
  }

  /**
   * Delete a webhook
   *
   * @param webhookId
   * @return Response from the API call
   */
  async deleteAWebhook(
    webhookId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({ webhookId: [webhookId, string()] });
    req.header('Content-Type', 'application/json');
    req.appendTemplatePath`/api/v2/webhooks/${mapped.webhookId}`;
    return req.call(requestOptions);
  }

  /**
   * Edit a webhook
   *
   * @param webhookId
   * @param body
   * @return Response from the API call
   */
  async editAWebhook(
    webhookId: string,
    body?: WebhookInput,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Webhook>> {
    const req = this.createRequest('PATCH');
    const mapped = req.prepareArgs({
      webhookId: [webhookId, string()],
      body: [body, optional(webhookInputSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/api/v2/webhooks/${mapped.webhookId}`;
    return req.callAsJson(webhookSchema, requestOptions);
  }
}
