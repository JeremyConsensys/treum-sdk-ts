/**
 * Treum Platform APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  CreateWalletPoolBody,
  createWalletPoolBodySchema,
} from '../models/createWalletPoolBody';
import {
  EditWalletPoolBody,
  editWalletPoolBodySchema,
} from '../models/editWalletPoolBody';
import { OrderBy9Enum, orderBy9EnumSchema } from '../models/orderBy9Enum';
import {
  OrderDirection9Enum,
  orderDirection9EnumSchema,
} from '../models/orderDirection9Enum';
import {
  PaginatedResult,
  paginatedResultSchema,
} from '../models/paginatedResult';
import {
  WalletPoolOutput,
  walletPoolOutputSchema,
} from '../models/walletPoolOutput';
import { number, optional, string } from '../schema';
import { BaseController } from './baseController';

export class WalletPoolController extends BaseController {
  /**
   * If no organization_id is specified, this is derived from the user's organization.
   *
   * @param organizationId
   * @param cursor          SafeString
   * @param limit           Uint
   * @param orderBy
   * @param orderDirection
   * @return Response from the API call
   */
  async getAllWalletPoolsForAnOrganization(
    organizationId?: string,
    cursor?: string,
    limit?: number,
    orderBy?: OrderBy9Enum,
    orderDirection?: OrderDirection9Enum,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PaginatedResult>> {
    const req = this.createRequest('GET', '/api/v2/walletpools');
    const mapped = req.prepareArgs({
      organizationId: [organizationId, optional(string())],
      cursor: [cursor, optional(string())],
      limit: [limit, optional(number())],
      orderBy: [orderBy, optional(orderBy9EnumSchema)],
      orderDirection: [orderDirection, optional(orderDirection9EnumSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.query('organization_id', mapped.organizationId);
    req.query('cursor', mapped.cursor);
    req.query('limit', mapped.limit);
    req.query('order_by', mapped.orderBy);
    req.query('order_direction', mapped.orderDirection);
    return req.callAsJson(paginatedResultSchema, requestOptions);
  }

  /**
   * Name of the wallet pool must be unique within the organization.
   *
   * @param body
   * @return Response from the API call
   */
  async createsANewWalletPoolForTheUserSOrganizationAndASpecificNetwork(
    body?: CreateWalletPoolBody,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<WalletPoolOutput>> {
    const req = this.createRequest('POST', '/api/v2/walletpools');
    const mapped = req.prepareArgs({
      body: [body, optional(createWalletPoolBodySchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    return req.callAsJson(walletPoolOutputSchema, requestOptions);
  }

  /**
   * Get a specific wallet pool by ID.
   *
   * @param id
   * @return Response from the API call
   */
  async getASpecificWalletPoolByID(
    id: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<WalletPoolOutput>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ id: [id, string()] });
    req.header('Content-Type', 'application/json');
    req.appendTemplatePath`/api/v2/walletpools/${mapped.id}`;
    return req.callAsJson(walletPoolOutputSchema, requestOptions);
  }

  /**
   * Only the wallet pool name can be updated.
   *
   * @param id
   * @param body
   * @return Response from the API call
   */
  async patchesASpecificWalletPoolByID(
    id: string,
    body?: EditWalletPoolBody,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<WalletPoolOutput>> {
    const req = this.createRequest('PATCH');
    const mapped = req.prepareArgs({
      id: [id, string()],
      body: [body, optional(editWalletPoolBodySchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/api/v2/walletpools/${mapped.id}`;
    return req.callAsJson(walletPoolOutputSchema, requestOptions);
  }
}
