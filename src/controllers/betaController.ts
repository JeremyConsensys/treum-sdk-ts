/**
 * Treum Platform APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  CreateEmailClaimInput,
  createEmailClaimInputSchema,
} from '../models/createEmailClaimInput';
import {
  CreateItemClaimBody,
  createItemClaimBodySchema,
} from '../models/createItemClaimBody';
import {
  CreatePaymentIntentInput,
  createPaymentIntentInputSchema,
} from '../models/createPaymentIntentInput';
import { EmailClaim, emailClaimSchema } from '../models/emailClaim';
import {
  EmailClaimsPaginatedResult,
  emailClaimsPaginatedResultSchema,
} from '../models/emailClaimsPaginatedResult';
import {
  EmailIntegrationInput,
  emailIntegrationInputSchema,
} from '../models/emailIntegrationInput';
import {
  EmailIntegrationOutput,
  emailIntegrationOutputSchema,
} from '../models/emailIntegrationOutput';
import {
  EmailIntegrationsPaginatedResult,
  emailIntegrationsPaginatedResultSchema,
} from '../models/emailIntegrationsPaginatedResult';
import { Item, itemSchema } from '../models/item';
import { ItemClaim, itemClaimSchema } from '../models/itemClaim';
import {
  ListingType3Enum,
  listingType3EnumSchema,
} from '../models/listingType3Enum';
import { OrderBy11Enum, orderBy11EnumSchema } from '../models/orderBy11Enum';
import { OrderBy12Enum, orderBy12EnumSchema } from '../models/orderBy12Enum';
import { OrderBy7Enum, orderBy7EnumSchema } from '../models/orderBy7Enum';
import { OrderBy8Enum, orderBy8EnumSchema } from '../models/orderBy8Enum';
import {
  OrderDirection9Enum,
  orderDirection9EnumSchema,
} from '../models/orderDirection9Enum';
import {
  PaymentIntentOutput,
  paymentIntentOutputSchema,
} from '../models/paymentIntentOutput';
import { Provider1Enum, provider1EnumSchema } from '../models/provider1Enum';
import {
  RecipientType3Enum,
  recipientType3EnumSchema,
} from '../models/recipientType3Enum';
import { SaleOutput, saleOutputSchema } from '../models/saleOutput';
import {
  SalesPaginatedResult,
  salesPaginatedResultSchema,
} from '../models/salesPaginatedResult';
import {
  SendTestEmailInput,
  sendTestEmailInputSchema,
} from '../models/sendTestEmailInput';
import { StateEnum, stateEnumSchema } from '../models/stateEnum';
import {
  TransactionOutput,
  transactionOutputSchema,
} from '../models/transactionOutput';
import {
  TransactionsPaginatedResult,
  transactionsPaginatedResultSchema,
} from '../models/transactionsPaginatedResult';
import { TxType3Enum, txType3EnumSchema } from '../models/txType3Enum';
import { array, boolean, number, optional, string } from '../schema';
import { BaseController } from './baseController';

export class BetaController extends BaseController {
  /**
   * Get all email claims for an organization
   *
   * @param collectionId
   * @param itemId
   * @param tokenId
   * @param email           SafeString
   * @param active
   * @param claimed
   * @param cursor          SafeString
   * @param limit           Uint
   * @param orderBy
   * @param orderDirection
   * @return Response from the API call
   */
  async getAllEmailClaimsForAnOrganization(
    collectionId: string[],
    itemId: string[],
    tokenId: string[],
    email?: string,
    active?: boolean,
    claimed?: boolean,
    cursor?: string,
    limit?: number,
    orderBy?: OrderBy7Enum,
    orderDirection?: OrderDirection9Enum,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<EmailClaimsPaginatedResult>> {
    const req = this.createRequest('GET', '/api/v2/email-claims');
    const mapped = req.prepareArgs({
      collectionId: [collectionId, array(string())],
      itemId: [itemId, array(string())],
      tokenId: [tokenId, array(string())],
      email: [email, optional(string())],
      active: [active, optional(boolean())],
      claimed: [claimed, optional(boolean())],
      cursor: [cursor, optional(string())],
      limit: [limit, optional(number())],
      orderBy: [orderBy, optional(orderBy7EnumSchema)],
      orderDirection: [orderDirection, optional(orderDirection9EnumSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.query('collection_id', mapped.collectionId);
    req.query('item_id', mapped.itemId);
    req.query('token_id', mapped.tokenId);
    req.query('email', mapped.email);
    req.query('active', mapped.active);
    req.query('claimed', mapped.claimed);
    req.query('cursor', mapped.cursor);
    req.query('limit', mapped.limit);
    req.query('order_by', mapped.orderBy);
    req.query('order_direction', mapped.orderDirection);
    return req.callAsJson(emailClaimsPaginatedResultSchema, requestOptions);
  }

  /**
   * Create a new email claim
   *
   * @param body
   * @return Response from the API call
   */
  async createANewEmailClaim(
    body?: CreateEmailClaimInput,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<EmailClaim>> {
    const req = this.createRequest('POST', '/api/v2/email-claims');
    const mapped = req.prepareArgs({
      body: [body, optional(createEmailClaimInputSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    return req.callAsJson(emailClaimSchema, requestOptions);
  }

  /**
   * Get email claim by id
   *
   * @param claimId
   * @return Response from the API call
   */
  async getEmailClaimById(
    claimId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<EmailClaim>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ claimId: [claimId, string()] });
    req.header('Content-Type', 'application/json');
    req.appendTemplatePath`/api/v2/email-claims/${mapped.claimId}`;
    return req.callAsJson(emailClaimSchema, requestOptions);
  }

  /**
   * This sends the same claim to a designated email address. If none specified, it sends to the original
   * email address on file.
   *
   * @param claimId
   * @return Response from the API call
   */
  async resendEmailClaimWithTheGivenId(
    claimId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<EmailClaim>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({ claimId: [claimId, string()] });
    req.header('Content-Type', 'application/json');
    req.appendTemplatePath`/api/v2/email-claims/${mapped.claimId}/resend`;
    return req.callAsJson(emailClaimSchema, requestOptions);
  }

  /**
   * Revoke email claim with the given id
   *
   * @param claimId
   * @return Response from the API call
   */
  async revokeEmailClaimWithTheGivenId(
    claimId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({ claimId: [claimId, string()] });
    req.header('Content-Type', 'application/json');
    req.appendTemplatePath`/api/v2/email-claims/${mapped.claimId}/revoke`;
    return req.call(requestOptions);
  }

  /**
   * Get all email integration configs for an organization
   *
   * @param provider
   * @param cursor          SafeString
   * @param limit           Uint
   * @param orderBy
   * @param orderDirection
   * @return Response from the API call
   */
  async getAllEmailIntegrationConfigsForAnOrganization(
    provider?: Provider1Enum,
    cursor?: string,
    limit?: number,
    orderBy?: OrderBy8Enum,
    orderDirection?: OrderDirection9Enum,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<EmailIntegrationsPaginatedResult>> {
    const req = this.createRequest('GET', '/api/v2/email-integrations');
    const mapped = req.prepareArgs({
      provider: [provider, optional(provider1EnumSchema)],
      cursor: [cursor, optional(string())],
      limit: [limit, optional(number())],
      orderBy: [orderBy, optional(orderBy8EnumSchema)],
      orderDirection: [orderDirection, optional(orderDirection9EnumSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.query('provider', mapped.provider);
    req.query('cursor', mapped.cursor);
    req.query('limit', mapped.limit);
    req.query('order_by', mapped.orderBy);
    req.query('order_direction', mapped.orderDirection);
    return req.callAsJson(
      emailIntegrationsPaginatedResultSchema,
      requestOptions
    );
  }

  /**
   * Create a new organization email config
   *
   * @param body
   * @return Response from the API call
   */
  async createANewOrganizationEmailConfig(
    body?: EmailIntegrationInput,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<EmailIntegrationOutput>> {
    const req = this.createRequest('POST', '/api/v2/email-integrations');
    const mapped = req.prepareArgs({
      body: [body, optional(emailIntegrationInputSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    return req.callAsJson(emailIntegrationOutputSchema, requestOptions);
  }

  /**
   * Creates and sends a new test mail.
   *
   * @param body
   * @return Response from the API call
   */
  async createsAndSendsANewTestMail(
    body?: SendTestEmailInput,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest(
      'POST',
      '/api/v2/email-integrations/send-test'
    );
    const mapped = req.prepareArgs({
      body: [body, optional(sendTestEmailInputSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * Delete an organization email config
   *
   * @param integrationId
   * @return Response from the API call
   */
  async deleteAnOrganizationEmailConfig(
    integrationId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      integrationId: [integrationId, string()],
    });
    req.header('Content-Type', 'application/json');
    req.appendTemplatePath`/api/v2/email-integrations/${mapped.integrationId}`;
    return req.call(requestOptions);
  }

  /**
   * Get organization email config by id
   *
   * @param integrationId
   * @return Response from the API call
   */
  async getOrganizationEmailConfigById(
    integrationId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<EmailIntegrationOutput>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      integrationId: [integrationId, string()],
    });
    req.header('Content-Type', 'application/json');
    req.appendTemplatePath`/api/v2/email-integrations/${mapped.integrationId}`;
    return req.callAsJson(emailIntegrationOutputSchema, requestOptions);
  }

  /**
   * Edit an organization email config
   *
   * @param integrationId
   * @return Response from the API call
   */
  async editAnOrganizationEmailConfig(
    integrationId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<EmailIntegrationOutput>> {
    const req = this.createRequest('PATCH');
    const mapped = req.prepareArgs({
      integrationId: [integrationId, string()],
    });
    req.header('Content-Type', 'application/json');
    req.appendTemplatePath`/api/v2/email-integrations/${mapped.integrationId}`;
    return req.callAsJson(emailIntegrationOutputSchema, requestOptions);
  }

  /**
   * Any existing emails sent out with a claim link will no longer be valid.
   *
   * @param itemId
   * @return Response from the API call
   */
  async revokeAllClaimsForTheItem(
    itemId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Item>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({ itemId: [itemId, string()] });
    req.header('Content-Type', 'application/json');
    req.appendTemplatePath`/api/v2/items/${mapped.itemId}/claim`;
    return req.callAsJson(itemSchema, requestOptions);
  }

  /**
   * The recipient will receive an email with a link to claim the item. If a claim exists, a new email
   * will be sent out, and the old one will no longer be valid. The template variable argument is
   * deprecated since organizations now have customizable email templates.
   *
   * @param itemId
   * @param body
   * @return Response from the API call
   */
  async createANewClaimOrReplaceAnExistingClaimOnTheItem(
    itemId: string,
    body?: CreateItemClaimBody,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ItemClaim>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      itemId: [itemId, string()],
      body: [body, optional(createItemClaimBodySchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/api/v2/items/${mapped.itemId}/claim`;
    return req.callAsJson(itemClaimSchema, requestOptions);
  }

  /**
   * The payment intent can be made with any provider configured for the listing. The provider must be
   * one of the following: STRIPE, COINBASE. The response data will have provider specific data in the
   * data field.
   *
   * @param body
   * @return Response from the API call
   */
  async createAPaymentIntentToPurchaseAnItemFromAListing(
    body?: CreatePaymentIntentInput,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PaymentIntentOutput>> {
    const req = this.createRequest('POST', '/api/v2/public/payment-intent');
    const mapped = req.prepareArgs({
      body: [body, optional(createPaymentIntentInputSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    return req.callAsJson(paymentIntentOutputSchema, requestOptions);
  }

  /**
   * Cancel the payment intent
   *
   * @param paymentIntentId
   * @return Response from the API call
   */
  async cancelThePaymentIntent(
    paymentIntentId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      paymentIntentId: [paymentIntentId, string()],
    });
    req.header('Content-Type', 'application/json');
    req.appendTemplatePath`/api/v2/public/payment-intent/${mapped.paymentIntentId}`;
    return req.call(requestOptions);
  }

  /**
   * Get all sales records for an organization
   *
   * @param collectionId
   * @param itemId
   * @param listingType
   * @param recipientType
   * @param cursor          SafeString
   * @param limit           Uint
   * @param orderBy
   * @param orderDirection
   * @return Response from the API call
   */
  async getAllSalesRecordsForAnOrganization(
    collectionId: string[],
    itemId: string[],
    listingType: ListingType3Enum[],
    recipientType?: RecipientType3Enum,
    cursor?: string,
    limit?: number,
    orderBy?: OrderBy11Enum,
    orderDirection?: OrderDirection9Enum,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SalesPaginatedResult>> {
    const req = this.createRequest('GET', '/api/v2/sales');
    const mapped = req.prepareArgs({
      collectionId: [collectionId, array(string())],
      itemId: [itemId, array(string())],
      listingType: [listingType, array(listingType3EnumSchema)],
      recipientType: [recipientType, optional(recipientType3EnumSchema)],
      cursor: [cursor, optional(string())],
      limit: [limit, optional(number())],
      orderBy: [orderBy, optional(orderBy11EnumSchema)],
      orderDirection: [orderDirection, optional(orderDirection9EnumSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.query('collection_id', mapped.collectionId);
    req.query('item_id', mapped.itemId);
    req.query('listing_type', mapped.listingType);
    req.query('recipient_type', mapped.recipientType);
    req.query('cursor', mapped.cursor);
    req.query('limit', mapped.limit);
    req.query('order_by', mapped.orderBy);
    req.query('order_direction', mapped.orderDirection);
    return req.callAsJson(salesPaginatedResultSchema, requestOptions);
  }

  /**
   * Get sale record by id
   *
   * @param saleId
   * @return Response from the API call
   */
  async getSaleRecordById(
    saleId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SaleOutput>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ saleId: [saleId, string()] });
    req.header('Content-Type', 'application/json');
    req.appendTemplatePath`/api/v2/sales/${mapped.saleId}`;
    return req.callAsJson(saleOutputSchema, requestOptions);
  }

  /**
   * Get all transaction records for an organization
   *
   * @param networkId
   * @param txType
   * @param state
   * @param signer
   * @param cursor          SafeString
   * @param limit           Uint
   * @param orderBy
   * @param orderDirection
   * @return Response from the API call
   */
  async getAllTransactionRecordsForAnOrganization(
    networkId: number[],
    txType: TxType3Enum[],
    state: StateEnum[],
    signer: string[],
    cursor?: string,
    limit?: number,
    orderBy?: OrderBy12Enum,
    orderDirection?: OrderDirection9Enum,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<TransactionsPaginatedResult>> {
    const req = this.createRequest('GET', '/api/v2/transactions');
    const mapped = req.prepareArgs({
      networkId: [networkId, array(number())],
      txType: [txType, array(txType3EnumSchema)],
      state: [state, array(stateEnumSchema)],
      signer: [signer, array(string())],
      cursor: [cursor, optional(string())],
      limit: [limit, optional(number())],
      orderBy: [orderBy, optional(orderBy12EnumSchema)],
      orderDirection: [orderDirection, optional(orderDirection9EnumSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.query('network_id', mapped.networkId);
    req.query('tx_type', mapped.txType);
    req.query('state', mapped.state);
    req.query('signer', mapped.signer);
    req.query('cursor', mapped.cursor);
    req.query('limit', mapped.limit);
    req.query('order_by', mapped.orderBy);
    req.query('order_direction', mapped.orderDirection);
    return req.callAsJson(transactionsPaginatedResultSchema, requestOptions);
  }

  /**
   * Get transaction record by id
   *
   * @param transactionId
   * @return Response from the API call
   */
  async getTransactionRecordById(
    transactionId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<TransactionOutput>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      transactionId: [transactionId, string()],
    });
    req.header('Content-Type', 'application/json');
    req.appendTemplatePath`/api/v2/transactions/${mapped.transactionId}`;
    return req.callAsJson(transactionOutputSchema, requestOptions);
  }
}
