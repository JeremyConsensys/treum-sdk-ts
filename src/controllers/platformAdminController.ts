/**
 * Treum Platform APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  CreateOrganizationInput,
  createOrganizationInputSchema,
} from '../models/createOrganizationInput';
import {
  CreatePlanInput,
  createPlanInputSchema,
} from '../models/createPlanInput';
import {
  EditNetworkData,
  editNetworkDataSchema,
} from '../models/editNetworkData';
import { EditPlanData, editPlanDataSchema } from '../models/editPlanData';
import { Network, networkSchema } from '../models/network';
import {
  OrganizationSchemaV2,
  organizationSchemaV2Schema,
} from '../models/organizationSchemaV2';
import { PlanOutput, planOutputSchema } from '../models/planOutput';
import { PlatformWallet, platformWalletSchema } from '../models/platformWallet';
import {
  SetPlanSubscriptionData,
  setPlanSubscriptionDataSchema,
} from '../models/setPlanSubscriptionData';
import {
  SetPlanSubscriptionOutput,
  setPlanSubscriptionOutputSchema,
} from '../models/setPlanSubscriptionOutput';
import { array, number, optional, string } from '../schema';
import { BaseController } from './baseController';

export class PlatformAdminController extends BaseController {
  /**
   * Get all the available networks
   *
   * @return Response from the API call
   */
  async getAllTheAvailableNetworks(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Network[]>> {
    const req = this.createRequest('GET', '/api/v2/networks');
    req.header('Content-Type', 'application/json');
    return req.callAsJson(array(networkSchema), requestOptions);
  }

  /**
   * Create a new network
   *
   * @param body
   * @return Response from the API call
   */
  async createANewNetwork(
    body?: Network,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Network>> {
    const req = this.createRequest('POST', '/api/v2/networks');
    const mapped = req.prepareArgs({ body: [body, optional(networkSchema)] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    return req.callAsJson(networkSchema, requestOptions);
  }

  /**
   * Get a specific network
   *
   * @param networkId
   * @return Response from the API call
   */
  async getASpecificNetwork(
    networkId: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Network>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ networkId: [networkId, number()] });
    req.header('Content-Type', 'application/json');
    req.appendTemplatePath`/api/v2/networks/${mapped.networkId}`;
    return req.callAsJson(networkSchema, requestOptions);
  }

  /**
   * Edit a specific network
   *
   * @param networkId
   * @param body
   * @return Response from the API call
   */
  async editASpecificNetwork(
    networkId: number,
    body?: EditNetworkData,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Network>> {
    const req = this.createRequest('PATCH');
    const mapped = req.prepareArgs({
      networkId: [networkId, number()],
      body: [body, optional(editNetworkDataSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/api/v2/networks/${mapped.networkId}`;
    return req.callAsJson(networkSchema, requestOptions);
  }

  /**
   * Create a new organization
   *
   * @param body
   * @return Response from the API call
   */
  async createANewOrganization(
    body?: CreateOrganizationInput,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<OrganizationSchemaV2>> {
    const req = this.createRequest('POST', '/api/v2/organizations');
    const mapped = req.prepareArgs({
      body: [body, optional(createOrganizationInputSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    return req.callAsJson(organizationSchemaV2Schema, requestOptions);
  }

  /**
   * Subscribe organization to a plan
   *
   * @param orgId
   * @param body
   * @return Response from the API call
   */
  async subscribeOrganizationToAPlan(
    orgId: string,
    body?: SetPlanSubscriptionData,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SetPlanSubscriptionOutput>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      orgId: [orgId, string()],
      body: [body, optional(setPlanSubscriptionDataSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/api/v2/organizations/${mapped.orgId}/plan-subscription`;
    return req.callAsJson(setPlanSubscriptionOutputSchema, requestOptions);
  }

  /**
   * Create a new plan
   *
   * @param body
   * @return Response from the API call
   */
  async createANewPlan(
    body?: CreatePlanInput,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PlanOutput>> {
    const req = this.createRequest('POST', '/api/v2/plans');
    const mapped = req.prepareArgs({
      body: [body, optional(createPlanInputSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    return req.callAsJson(planOutputSchema, requestOptions);
  }

  /**
   * Edit a plan
   *
   * @param planId
   * @param body
   * @return Response from the API call
   */
  async editAPlan(
    planId: string,
    body?: EditPlanData,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PlanOutput>> {
    const req = this.createRequest('PATCH');
    const mapped = req.prepareArgs({
      planId: [planId, string()],
      body: [body, optional(editPlanDataSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/api/v2/plans/${mapped.planId}`;
    return req.callAsJson(planOutputSchema, requestOptions);
  }

  /**
   * Get all platform wallets
   *
   * @return Response from the API call
   */
  async getAllPlatformWallets(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PlatformWallet[]>> {
    const req = this.createRequest('GET', '/api/v2/platform-wallets');
    req.header('Content-Type', 'application/json');
    return req.callAsJson(array(platformWalletSchema), requestOptions);
  }
}
